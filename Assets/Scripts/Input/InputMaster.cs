//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Input/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""PlayerInput"",
            ""id"": ""1d51fe66-d163-4a0c-879f-ae8d472ac681"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e28b7c9e-8f95-411c-b4ff-795f7bc073be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""7ef75745-79ab-4546-8096-105678c79c63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw Dagger"",
                    ""type"": ""Button"",
                    ""id"": ""32f99c2f-3283-4db0-b637-74a085be270b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw Dagger Special"",
                    ""type"": ""Button"",
                    ""id"": ""48e1c284-404e-4d53-816f-e8ea198bb723"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Blink"",
                    ""type"": ""Button"",
                    ""id"": ""7188c2b6-5610-4a76-9989-515628e358c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""decb1fb9-5425-4534-a6a5-8d8023e0edc4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2dc91a2-d8c2-4b37-8e8c-27fe4a9fbe04"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Throw Dagger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""002cb458-c593-4ab8-8686-b01e7bfe64bd"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Throw Dagger Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""625002a5-8c83-494c-afe2-123f1cd512b0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Blink"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e4458021-825a-44ca-93ee-ac412ba6e372"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""283e857d-983d-422a-ae4a-f3945d303266"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""408e5620-f5e9-4fff-8262-4844cd331b25"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MenuInput"",
            ""id"": ""e1310b79-5091-4885-ac61-d81cad041050"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""586bbbfb-591f-4a95-9425-84c8d7292088"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2a3dbfb2-44ae-4e33-acd6-694244abfe33"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and mouse"",
            ""bindingGroup"": ""Keyboard and mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerInput
        m_PlayerInput = asset.FindActionMap("PlayerInput", throwIfNotFound: true);
        m_PlayerInput_Jump = m_PlayerInput.FindAction("Jump", throwIfNotFound: true);
        m_PlayerInput_Movement = m_PlayerInput.FindAction("Movement", throwIfNotFound: true);
        m_PlayerInput_ThrowDagger = m_PlayerInput.FindAction("Throw Dagger", throwIfNotFound: true);
        m_PlayerInput_ThrowDaggerSpecial = m_PlayerInput.FindAction("Throw Dagger Special", throwIfNotFound: true);
        m_PlayerInput_Blink = m_PlayerInput.FindAction("Blink", throwIfNotFound: true);
        // MenuInput
        m_MenuInput = asset.FindActionMap("MenuInput", throwIfNotFound: true);
        m_MenuInput_Newaction = m_MenuInput.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInput
    private readonly InputActionMap m_PlayerInput;
    private IPlayerInputActions m_PlayerInputActionsCallbackInterface;
    private readonly InputAction m_PlayerInput_Jump;
    private readonly InputAction m_PlayerInput_Movement;
    private readonly InputAction m_PlayerInput_ThrowDagger;
    private readonly InputAction m_PlayerInput_ThrowDaggerSpecial;
    private readonly InputAction m_PlayerInput_Blink;
    public struct PlayerInputActions
    {
        private @InputMaster m_Wrapper;
        public PlayerInputActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerInput_Jump;
        public InputAction @Movement => m_Wrapper.m_PlayerInput_Movement;
        public InputAction @ThrowDagger => m_Wrapper.m_PlayerInput_ThrowDagger;
        public InputAction @ThrowDaggerSpecial => m_Wrapper.m_PlayerInput_ThrowDaggerSpecial;
        public InputAction @Blink => m_Wrapper.m_PlayerInput_Blink;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerInputActions instance)
        {
            if (m_Wrapper.m_PlayerInputActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnJump;
                @Movement.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMovement;
                @ThrowDagger.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnThrowDagger;
                @ThrowDagger.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnThrowDagger;
                @ThrowDagger.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnThrowDagger;
                @ThrowDaggerSpecial.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnThrowDaggerSpecial;
                @ThrowDaggerSpecial.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnThrowDaggerSpecial;
                @ThrowDaggerSpecial.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnThrowDaggerSpecial;
                @Blink.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnBlink;
                @Blink.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnBlink;
                @Blink.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnBlink;
            }
            m_Wrapper.m_PlayerInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @ThrowDagger.started += instance.OnThrowDagger;
                @ThrowDagger.performed += instance.OnThrowDagger;
                @ThrowDagger.canceled += instance.OnThrowDagger;
                @ThrowDaggerSpecial.started += instance.OnThrowDaggerSpecial;
                @ThrowDaggerSpecial.performed += instance.OnThrowDaggerSpecial;
                @ThrowDaggerSpecial.canceled += instance.OnThrowDaggerSpecial;
                @Blink.started += instance.OnBlink;
                @Blink.performed += instance.OnBlink;
                @Blink.canceled += instance.OnBlink;
            }
        }
    }
    public PlayerInputActions @PlayerInput => new PlayerInputActions(this);

    // MenuInput
    private readonly InputActionMap m_MenuInput;
    private IMenuInputActions m_MenuInputActionsCallbackInterface;
    private readonly InputAction m_MenuInput_Newaction;
    public struct MenuInputActions
    {
        private @InputMaster m_Wrapper;
        public MenuInputActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_MenuInput_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_MenuInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuInputActions set) { return set.Get(); }
        public void SetCallbacks(IMenuInputActions instance)
        {
            if (m_Wrapper.m_MenuInputActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_MenuInputActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_MenuInputActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_MenuInputActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_MenuInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public MenuInputActions @MenuInput => new MenuInputActions(this);
    private int m_KeyboardandmouseSchemeIndex = -1;
    public InputControlScheme KeyboardandmouseScheme
    {
        get
        {
            if (m_KeyboardandmouseSchemeIndex == -1) m_KeyboardandmouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and mouse");
            return asset.controlSchemes[m_KeyboardandmouseSchemeIndex];
        }
    }
    public interface IPlayerInputActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnThrowDagger(InputAction.CallbackContext context);
        void OnThrowDaggerSpecial(InputAction.CallbackContext context);
        void OnBlink(InputAction.CallbackContext context);
    }
    public interface IMenuInputActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
